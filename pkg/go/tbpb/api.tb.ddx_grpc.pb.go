// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tbpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TbApiServiceClient is the client API for TbApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TbApiServiceClient interface {
	SearchGoods(ctx context.Context, in *SearchGoodsRequest, opts ...grpc.CallOption) (*SearchGoodsResponse, error)
	PromoteByID(ctx context.Context, in *PromoteURLByIDRequest, opts ...grpc.CallOption) (*PromoteURLResponse, error)
	PromoteByTKL(ctx context.Context, in *PromoteURLByTKLRequest, opts ...grpc.CallOption) (*PromoteURLResponse, error)
}

type tbApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTbApiServiceClient(cc grpc.ClientConnInterface) TbApiServiceClient {
	return &tbApiServiceClient{cc}
}

func (c *tbApiServiceClient) SearchGoods(ctx context.Context, in *SearchGoodsRequest, opts ...grpc.CallOption) (*SearchGoodsResponse, error) {
	out := new(SearchGoodsResponse)
	err := c.cc.Invoke(ctx, "/tbpb.TbApiService/SearchGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tbApiServiceClient) PromoteByID(ctx context.Context, in *PromoteURLByIDRequest, opts ...grpc.CallOption) (*PromoteURLResponse, error) {
	out := new(PromoteURLResponse)
	err := c.cc.Invoke(ctx, "/tbpb.TbApiService/PromoteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tbApiServiceClient) PromoteByTKL(ctx context.Context, in *PromoteURLByTKLRequest, opts ...grpc.CallOption) (*PromoteURLResponse, error) {
	out := new(PromoteURLResponse)
	err := c.cc.Invoke(ctx, "/tbpb.TbApiService/PromoteByTKL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TbApiServiceServer is the server API for TbApiService service.
// All implementations must embed UnimplementedTbApiServiceServer
// for forward compatibility
type TbApiServiceServer interface {
	SearchGoods(context.Context, *SearchGoodsRequest) (*SearchGoodsResponse, error)
	PromoteByID(context.Context, *PromoteURLByIDRequest) (*PromoteURLResponse, error)
	PromoteByTKL(context.Context, *PromoteURLByTKLRequest) (*PromoteURLResponse, error)
	mustEmbedUnimplementedTbApiServiceServer()
}

// UnimplementedTbApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTbApiServiceServer struct {
}

func (UnimplementedTbApiServiceServer) SearchGoods(context.Context, *SearchGoodsRequest) (*SearchGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGoods not implemented")
}
func (UnimplementedTbApiServiceServer) PromoteByID(context.Context, *PromoteURLByIDRequest) (*PromoteURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteByID not implemented")
}
func (UnimplementedTbApiServiceServer) PromoteByTKL(context.Context, *PromoteURLByTKLRequest) (*PromoteURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteByTKL not implemented")
}
func (UnimplementedTbApiServiceServer) mustEmbedUnimplementedTbApiServiceServer() {}

// UnsafeTbApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TbApiServiceServer will
// result in compilation errors.
type UnsafeTbApiServiceServer interface {
	mustEmbedUnimplementedTbApiServiceServer()
}

func RegisterTbApiServiceServer(s grpc.ServiceRegistrar, srv TbApiServiceServer) {
	s.RegisterService(&TbApiService_ServiceDesc, srv)
}

func _TbApiService_SearchGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TbApiServiceServer).SearchGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tbpb.TbApiService/SearchGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TbApiServiceServer).SearchGoods(ctx, req.(*SearchGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TbApiService_PromoteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteURLByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TbApiServiceServer).PromoteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tbpb.TbApiService/PromoteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TbApiServiceServer).PromoteByID(ctx, req.(*PromoteURLByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TbApiService_PromoteByTKL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteURLByTKLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TbApiServiceServer).PromoteByTKL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tbpb.TbApiService/PromoteByTKL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TbApiServiceServer).PromoteByTKL(ctx, req.(*PromoteURLByTKLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TbApiService_ServiceDesc is the grpc.ServiceDesc for TbApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TbApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tbpb.TbApiService",
	HandlerType: (*TbApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchGoods",
			Handler:    _TbApiService_SearchGoods_Handler,
		},
		{
			MethodName: "PromoteByID",
			Handler:    _TbApiService_PromoteByID_Handler,
		},
		{
			MethodName: "PromoteByTKL",
			Handler:    _TbApiService_PromoteByTKL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.tb.ddx.proto",
}
